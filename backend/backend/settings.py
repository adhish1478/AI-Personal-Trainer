"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv # type: ignore
from pathlib import Path




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(dotenv_path=os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-f7jn72ah+l07^3nc^tgjau%wa3)%e32b-d&0ds1=2g=go4vf+p'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '34.122.140.209',
    'localhost',
    '127.0.0.1',
]


# Application definition

SITE_ID = 1  # Default site ID for Django sites framework

INSTALLED_APPS = [
    'daphne',  # Daphne for ASGI server
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts', # APP for accounts
    'rest_framework',
    'rest_framework_simplejwt',  # JWT authentication
    'rest_framework_simplejwt.token_blacklist',  # Optional: for token blacklisting
    'django.contrib.sites',  # Required for sites framework
    'allauth',  # Django Allauth for user management
    'allauth.account',  # Django Allauth account management
    'allauth.socialaccount',  # Django Allauth social account management
    'allauth.socialaccount.providers.google',  # Google provider for Allauth
    'corsheaders',  # CORS headers for cross-origin requests
    'channels',  # Django Channels for WebSocket support
    'chat',  # APP for chat functionality
    'diet',  # APP for diet management
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.getenv('SOCIAL_AUTH_GOOGLE_CLIENT_ID', 'your-client-id'),
            'secret': os.getenv('SOCIAL_AUTH_GOOGLE_SECRET', 'your-client-secret'),
            'key': ''  # Optional: if you have a key, otherwise leave it empty
        },
        'SCOPE': [
            'profile',
            'email'
        ],
        'AUTH_PARAMS': {'access_type': 'online'},
    }
}

AUTH_USER_MODEL = 'accounts.CustomUser'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
}

# ASGI SETTINGS
ASGI_APPLICATION = 'backend.asgi.application'

#JWT Authentication settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=1),  # or 1 hour, etc.
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # longer lifetime
    'ROTATE_REFRESH_TOKENS': True,                   # Optional: rotates token on refresh
    'BLACKLIST_AFTER_ROTATION': True,                # Optional: blocks old refresh tokens
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",  # For serving static files
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # change this in production

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', 'FitnessChatbot'),  # your Cloud SQL DB name
        'USER': os.getenv('DB_USER', 'postgres'),              # your Cloud SQL user
        'PASSWORD': os.getenv('DB_PASSWORD', '1234'),        # password for the user
        'HOST': os.getenv('DB_HOST', 'localhost'),        # Cloud SQL public IP
        'PORT': os.getenv('DATABASE_PORT', '5432'),               # default Postgres port
        # SSL settings
        'OPTIONS': {
            "sslmode": os.getenv("SSL_MODE"),
            "sslrootcert": os.getenv("SSL_ROOT_CERT"),
            "sslcert": os.getenv("SSL_CLIENT_CERT"),
            "sslkey": os.getenv("SSL_CLIENT_KEY"),
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = "/static/"
STATIC_ROOT = BASE_DIR / "staticfiles"  # collectstatic will copy files here

# Tell Django about additional static folders
STATICFILES_DIRS = [
    BASE_DIR / "static",  # your backend/static folder
]

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Celery setup
CELERY_BROKER_URL = 'redis://redis:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'

# Use console backend for dev
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST= 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')  # Use environment variable for security
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')  # Use environment variable for security
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER


# OAuth settings
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',  # Default backend
    'allauth.account.auth_backends.AuthenticationBackend',  # Django Allauth backend
)

LOGIN_REDIRECT_URL = '/'  # Redirect URL after login
LOGOUT_REDIRECT_URL = '/'  # Redirect URL after logout

ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_LOGIN_METHODS = {'email'}


# Gemini API settings
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY', 'your-gemini-api-key')

'''# USDA API settings -------- NOT IN USE CURRENTLY
USDA_API_KEY = os.getenv('USDA_API_KEY', 'your-usda-api-key')
'''